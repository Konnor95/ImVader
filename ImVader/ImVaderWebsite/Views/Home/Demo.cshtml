@{
    ViewBag.Title = "ImVader Demo";
    ViewBag.BodyOnLoad = "onPageLoaded();";
    ViewBag.DisplayFooter = false;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section head
{
    <link rel="stylesheet" href="~/Content/demo.css" />
    <link href="http://visjs.org/dist/vis.css" rel="stylesheet" type="text/css" />

    <!-- Third-party Libs -->
    <script src="http://vk.com/js/api/openapi.js" type="text/javascript"></script>
    <script src="http://visjs.org/dist/vis.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/spin.js/1.2.7/spin.min.js"></script>

    <!-- ourLibs -->
    <script src="~/External/vkConnection.js" type="text/javascript"></script>
    <script src="~/External/graph.js" type="text/javascript"></script>
    <script src="~/External/spinner.js" type="text/javascript"></script>
    <script src="~/External/util.js" type="text/javascript"></script>
}


<div id="loading" class="hidden">
    <div id="splash" class="page-splash"></div>
    <div id="spinner" class="spinner"></div>
</div>

<a download="info.txt" id="downloadlink">Download</a>

<script>

    (function () {
        var textFile = null,
            makeTextFile = function (text) {
                var data = new Blob([text], { type: 'text/javascript' });

                // If we are replacing a previously generated file we need to
                // manually revoke the object URL to avoid memory leaks.
                if (textFile !== null) {
                    window.URL.revokeObjectURL(textFile);
                }

                textFile = window.URL.createObjectURL(data);

                return textFile;
            };

        var create = document.getElementById('downloadlink');

        create.addEventListener('click', function () {
            var link = document.getElementById('downloadlink');
            link.href = makeTextFile(JSON.stringify(getGraphAsJson()));
            link.style.display = 'block';
        }, false);
    })();

</script>





<div class="absolute">
    <div id="login_button" onclick="VK.Auth.login(authInfo);"></div>

    <div id="user_info" class="col-xs-12 col-sm-12 col-md-12 col-lg-12  toppad hidden">
        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 id="user_name" class="panel-title"></h3>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div id="user_pic" class="col-md-3 col-lg-3 "></div>
                    <div class=" col-md-9 col-lg-9 ">
                        <div>
                            <span><b>User ID: </b></span>
                            <span id="user_id"></span>
                        </div>
                        <div>
                            <span><b>Gender: </b></span>
                            <span id="user_gender"></span>
                        </div>
                        <br />
                        <a onclick="getFriends()" class="btn btn-primary">Get friends</a>
                        <div id="drop_zone" style="font-size:large;">Drop files here</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="graph_place" class="relative"></div>


<output id="list"></output>

<script>
    var files;
    function handleFileSelect(evt) {
        evt.stopPropagation();
        evt.preventDefault();

        files = evt.dataTransfer.files; // FileList object.

        // files is a FileList of File objects. List some properties.
        var output = [];
        for (var i = 0, f; f = files[i]; i++) {
            output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                f.size, ' bytes, last modified: ',
                f.lastModifiedDate.toLocaleDateString(), '</li>');
        }
        document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';


        var reader = new FileReader();

        reader.onload = function (e) {
            var text = reader.result;
            var graph = jQuery.parseJSON(reader.result);
            clearGraph();

            for (var j = 0; j < graph.nodes.length; j++) {
                data.nodes = addNode(graph.nodes[j]);
            }
            for (var j = 0; j < graph.edges.length; j++) {
                data.edges = addEdge(graph.edges[j].from, graph.edges[j].to);
            }

            initializeGraph();
        }

        reader.readAsText(files[0]);

    }

    function handleDragOver(evt) {
        evt.stopPropagation();
        evt.preventDefault();
        evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
    }

    // Setup the dnd listeners.
    var dropZone = document.getElementById('drop_zone');
    dropZone.addEventListener('dragover', handleDragOver, false);
    dropZone.addEventListener('drop', handleFileSelect, false);



</script>