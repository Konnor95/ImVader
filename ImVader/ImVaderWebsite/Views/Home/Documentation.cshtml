@{
    Layout = "~/Views/Shared/_Documenation.cshtml";
    ViewBag.Title = "ImVader | Documentation";
}

<div class="jumbotron">
    <h1>ImVader</h1>
    <br><br>
    <h2>Description</h2>
    <p>ImVader is a flexible and powerful .NET framework for working with graphs</p>
    <br>
    <p>
        The project is hosted on <a class="projectLinks" href="https://github.com/Konnor95/ImVader/" target="_blank">Github</a> and is available for use under the <a class="projectLinks" href="#" target="_blank">MIT software license</a>.  You can report bugs and discuss features on the <a href="#" target="_blank">GitHub issues page</a>, or send tweets to <a href="#" target="_blank">Enter Project Twitter Page Here</a>.
    </p>
    <p><a class="btn btn-primary btn-lg" href="https://github.com/Konnor95/ImVader/" target="_blank">Fork us on Github »</a></p>
</div>
<div>
    <h2>Requirements</h2>
    <br>
    <p class="well">
        ImVader requires .NET 4.5 to be installed
    </p>
    <br>
</div>
<div>
    <h2>Optional Dependencies</h2>
    <br>
    <p class="well">
        ImVader uses NewtonSoft.Json library
    </p>
    <br>
</div>
<div>
    <h2>Notable Features</h2>
    <br>
    <p class="well">
        Enter Notable Features Here
    </p>
    <br>
</div>
<div>
    <h2>Browser Support</h2>
    <br>
    <p class="well">
        Enter Browser Support Here
    </p>
    <br>
</div>



<div>
    <h2 id="anchor-graph">Graph</h2>
    <p class="well note">
        <strong>Graph</strong> respresents an abstract parent class for all graphs. It contains initial methods and fields which are used in any graph represenation.
    </p>
    <div>
        <h3>Constructors</h3>
        <br />
        <div>
            <h4><strong>protected Graph()</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
protected Graph()
</code>
</pre>
                <p><strong>Description</strong></p>
                <p>
                    Initializes Vertices and Edges collections.
                </p>
            </div>
        </div>
        <div></div>
        <br>
    </div>
    <div>
        <h3>Fields and properties</h3>
        <br />
        <div>
            <h4><strong>Vertices</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
protected Dictionary&lt;int, vertex&lt;TV&gt;&gt; Vertices;
</code>
</pre>
                <p><strong>Description</strong></p>
                <p>
                    A collection of vertices in the graph
                </p>
            </div>
        </div>
        <div>
            <h4><strong>Edges</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
protected List&lt;int&gt; Indexes
</code>
</pre>
                <p><strong>Description</strong></p>
                <p>
                    Contains indexes of the stored vertices
                </p>
            </div>
        </div>
        <div>
            <h4><strong>VertexCount</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public int VertexCount
{
    get { /*...*/ }
}
</code>
</pre>
                <p><strong>Description</strong></p>
                <p>
                    Gets number of vertices in the graph
                </p>
            </div>
        </div>
        <div>
            <h4><strong>EdgesCount</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public int EdgesCount { get; protected set; }
</code>
</pre>
                <p><strong>Description</strong></p>
                <p>
                    Gets or sets number of edges in the graph
                </p>
            </div>
        </div>
        <div>
            <h4><strong>LastEdgeIndex</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
protected int LastEdgeIndex { get; set; }
</code>
</pre>
                <p><strong>Description</strong></p>
                <p>
                    Gets or sets the last edge index.
                </p>
            </div>
        </div>
        <div>
            <h4><strong>LastVertexIndex</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
protected int LastVertexIndex
{
    get { /*...*/ }
}
</code>
</pre>
                <p><strong>Description</strong></p>
                <p>
                    Gets the last vertex index or -1 if there is no vertices in the graph.
                </p>
            </div>
        </div>
    </div>



    <div>
        <h3>Methods</h3>
        <br />
        <div>
            <h4><strong>GetAdjacentVertices(int v)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public abstract IEnumerable&lt;int&gt; GetAdjacentVertices(int v);
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                v
                            </td>
                            <td>int</td>
                            <td></td>
                            <td>The vertex index</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Gets a collection of indexes of the vertices that are adjacent for the vertex v
                </p>
            </div>
        </div>
        <div>
            <h4><strong>GetAdjacentEdges(int v)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public abstract IEnumerable&lt;TE&gt; GetAdjacentEdges(int v);
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                v
                            </td>
                            <td>int</td>
                            <td></td>
                            <td>The vertex index</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Gets a collection of indexes of the edges that are adjacent for the vertex v
                </p>
            </div>
        </div>
        <div>
            <h4><strong>AddVertex(TV value)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public abstract int AddVertex(TV value);
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                value
                            </td>
                            <td>TV</td>
                            <td></td>
                            <td>The value of the vertex</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Adds a new vertex to the graph.
                </p>
            </div>
        </div>
        <div>
            <h4><strong>GetVertexData(int index)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public virtual TV GetVertexData(int index)
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                index
                            </td>
                            <td>int</td>
                            <td></td>
                            <td>Index of the vertex</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Gets vertex data
                </p>
            </div>
        </div>
        <div>
            <h4><strong>SetVertexData(int index, TV data)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public virtual void SetVertexData(int index, TV data)
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                index
                            </td>
                            <td>int</td>
                            <td></td>
                            <td>Index of the vertex</td>
                        </tr>
                        <tr>
                            <td>
                                data
                            </td>
                            <td>TV</td>
                            <td></td>
                            <td>Data to store in the vertex</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Sets data to the the vertex
                </p>
            </div>
        </div>
        <div>
            <h4><strong>RemoveVertex(int index)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public abstract void RemoveVertex(int index);
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                index
                            </td>
                            <td>int</td>
                            <td></td>
                            <td>Index of the vertex</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Removes the vertex with the specified index
                </p>
            </div>
        </div>
        <div>
            <h4><strong>AddEdge(TE e);</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public abstract int AddEdge(TE e);
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                e
                            </td>
                            <td>int</td>
                            <td></td>
                            <td>The edge to add</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Adds a new edge to the graph, returns the index of the created edge
                </p>
            </div>
        </div>
        <div>
            <h4><strong>GetEdge(int edgeIndex)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public virtual TE GetEdge(int edgeIndex)
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>edgeIndex</td>
                            <td>int</td>
                            <td></td>
                            <td>The index of the edge</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Gets the edge with specified index, returns the edge found
                </p>
            </div>
        </div>
        <div>
            <h4><strong>RemoveEdge(int index)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public abstract void RemoveEdge(int index);
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>edgeIndex</td>
                            <td>int</td>
                            <td></td>
                            <td>The index of the edge</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Removes the edge with the specified index
                </p>
            </div>
        </div>
    </div>
</div>





<div>
    <h2 id="anchor-list-graph">ListGraph</h2>
    <p class="well note">
        <strong>ListGraph</strong> respresents a list-based graph. It's a simple and fast implementation of a <a href="#anchor-graph">Graph</a> class.
        Some methods/fields/constructors may not be described here as they are already described in the <a href="#anchor-graph">parent class</a>.
    </p>
    <div>
        <h3>Constructors</h3>
        <br />
        <div>
            <h4><strong>ListGraph(int capacity = 0)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public ListGraph(int capacity = 0)
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                capacity
                            </td>
                            <td>int</td>
                            <td>0</td>
                            <td>Number of vertices</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Initializes a new instance of the ListGraph&lt;TV,TE&gt; class.
                </p>
            </div>
        </div>
        <div></div>
        <br>
    </div>
    <div>
        <h3>Methods</h3>
        <br />
        <div>
            <h4><strong>AddVertex(TV value, int index)</strong></h4>
            <div style="padding-left: 20px">
                <p><strong>Syntax</strong></p>
                <pre>
<code data-language="csharp">
public int AddVertex(TV value, int index)
</code>
</pre>
                <p><strong>Parameters</strong></p>
                <table class="table table-striped table-bordered table-condensed">
                    <tbody>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Default</th>
                            <th>Description</th>
                        </tr>
                        <tr>
                            <td>
                                value
                            </td>
                            <td>TV</td>
                            <td></td>
                            <td>The vertex type</td>
                        </tr>
                        <tr>
                            <td>
                                index
                            </td>
                            <td>int</td>
                            <td></td>
                            <td>The index of the vertex</td>
                        </tr>
                    </tbody>
                </table>
                <p><strong>Description</strong></p>
                <p>
                    Adds a new vertex with specified index.
                </p>
            </div>
        </div>
        <div></div>
        <br>
    </div>
</div>




<h2>Contributing</h2>
<p class="well">
    Take care to maintain the existing coding style. Add <strong>Enter Unit Testing Framework</strong> unit tests for any new or changed functionality. Lint and test your code using <strong>Enter Build Tool Here</strong>.
</p>
<p class="well">
    <span class="note">
        After you have verified your code, send a pull request to the <em>Enter Project Name Here</em> develop branch.  After you send a pull request, you will hear back from me shortly after I review your code.  You’ll find source code in the <code>src</code> subdirectory!
    </span>
</p>
<br>
<h2>Code map</h2>
<p class="well">
    If you want to understand the whole stucture of the framework, you can look through the <a href="~/Images/CodeMap.png" target="_blank">code map</a> of the framework.
</p>
<br>
